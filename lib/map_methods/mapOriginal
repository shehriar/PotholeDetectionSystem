// map.dart

import 'dart:async';
import 'dart:math';
import 'package:flutter/material.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart';  // Google maps
import 'package:cloud_firestore/cloud_firestore.dart';  // Firestore
import 'package:intl/intl.dart';
import 'firebase_service.dart';  // Firebase service
import 'package:geolocator/geolocator.dart';
import 'package:flutter_polyline_points/flutter_polyline_points.dart';
import 'package:pothole_detection_system/home.dart';
import 'package:pothole_detection_system/main.dart';
import 'package:pothole_detection_system/stop.dart';
import 'package:pothole_detection_system/map_methods/polyline_directions.dart';

class MapScreen extends StatefulWidget {
  @override
  _MapScreenState createState() => _MapScreenState();
}

class _MapScreenState extends State<MapScreen> {
  Completer<GoogleMapController> _controller = Completer();
  Set<Circle> _circles = {};  // Set to hold circles for potholes
  //static const LatLng _center = const LatLng(37.414304, -122.092877);
  String? _currentAddress;
  Position? _currentPosition;
  LatLng ?_center;
  var distanceToDestinationKM;
  var distanceToDestinationMiles;

  late PolylinePoints directionPoints; // For drawing directions from source to destination
  List<LatLng> directionsCoordinates = [];
  Map<PolylineId, Polyline> polylines = {};


  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addPostFrameCallback((_) => _afterBuild());
    _fetchPotholes();
  }

  Future<void> _afterBuild() async {
    // destinationPosition = stringToPosition(destination!);

    await _getCurrentPosition();

    if (_currentPosition != null && destinationPosition != null) {
      List<LatLng> directionsCoordinates = await PolylineDirections.getPolylineCoordinates(
        _currentPosition!.latitude,
        _currentPosition!.longitude,
        destinationPosition!.latitude,
        destinationPosition!.longitude,
      );

      _updatePolylines(directionsCoordinates);
    }
  }

  void _updatePolylines(List<LatLng> coordinates) {
    PolylineId id = PolylineId('direction');
    Polyline polyline = Polyline(
      polylineId: id,
      color: Colors.lightBlue,
      points: coordinates,
      width: 6,
    );

    setState(() {
      polylines[id] = polyline;
    });
  }

  void _onMapCreated(GoogleMapController controller) async {
    _controller.complete(controller);
    _userMovingPosition();
    distanceToDestinationKM = await Geolocator.distanceBetween(
        destinationPosition!.latitude,
        destinationPosition!.longitude,
        _currentPosition!.latitude,
        _currentPosition!.longitude);
    distanceToDestinationKM = distanceToDestinationKM/1000;
    distanceToDestinationKM = double.parse((distanceToDestinationKM).toStringAsFixed(2));
    distanceToDestinationMiles = distanceToDestinationKM/1.609;
    distanceToDestinationMiles = double.parse((distanceToDestinationMiles).toStringAsFixed(2));
  }

  void _userMovingPosition() async {
    var stream = Geolocator.getPositionStream();

    stream.listen((Position position) async {
      _currentPosition = position;
      _center = LatLng(position.latitude, position.longitude);
      _moveCameraToPosition(_center!);

      List<LatLng> newDirectionsCoordinates = await PolylineDirections.getPolylineCoordinates(
        position.latitude,
        position.longitude,
        destinationPosition!.latitude,
        destinationPosition!.longitude,
      );

      _updatePolylines(newDirectionsCoordinates);
    });
  }


  void _moveCameraToPosition(LatLng position) async {
    final GoogleMapController controller = await _controller.future;
    controller.moveCamera(CameraUpdate.newLatLng(position));
  }


  // Fetch the potholes from Firestore and create markers for them
  void _fetchPotholes() {
    FirebaseService().getPotholesStream().listen((snapshot) {
      _circles.clear();

      for (var document in snapshot.docs) {
        final data = document.data() as Map<String, dynamic>;
        final potholeId = document.id;
        final lat = data['latitude'];
        final lon = data['longitude'];
        final size = data['size'];

        // Determine circle color based on size
        Color circleColor;
        if (size == "small") {
          circleColor = Colors.yellow;
        } else if (size == "medium") {
          circleColor = Colors.orange;
        } else {
          circleColor = Colors.red;
        }

        Circle circle = Circle(
          circleId: CircleId(potholeId),
          center: LatLng(lat, lon),
          radius: 2.0,
          fillColor: circleColor,
          strokeWidth: 1,
          strokeColor: Colors.black,
        );

        setState(() {
          _circles.add(circle);
        });
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    // Get the center position from the current position if it's available
    _center = _currentPosition != null ? LatLng(
        _currentPosition!.latitude, _currentPosition!.longitude) : null;
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
            title: Text('Maps with Potholes'),
            backgroundColor: Colors.green[700],

            actions: [
              Row(
                  children:[
                    Text('Report Pothole', style: TextStyle(color: Colors.red[300], fontWeight: FontWeight.bold, fontSize: 16)),
                    PopupMenuButton<int>(
                      itemBuilder: (context) => [
                        // PopupMenuItem 1
                        PopupMenuItem(
                          onTap: () {_reportPothole("small"); },
                          value: 1,
                          // row with 2 children
                          child: Row(
                            children: [
                              Icon(Icons.star),
                              SizedBox(
                                width: 10,
                              ),
                              Text("Small")
                            ],
                          ),
                        ),
                        PopupMenuItem(
                          onTap: () {_reportPothole("medium");},
                          value: 2,
                          // row with 2 children
                          child: Row(
                            children: [
                              Icon(Icons.star),
                              SizedBox(
                                width: 10,
                              ),
                              Text("Medium")
                            ],
                          ),
                        ),
                        PopupMenuItem(
                          onTap: () {_reportPothole("large");},
                          value: 3,
                          // row with 2 children
                          child: Row(
                            children: [
                              Icon(Icons.star),
                              SizedBox(
                                width: 10,
                              ),
                              Text("Large")
                            ],
                          ),
                        )
                      ],
                    )
                  ]
              )
            ]),
        body: _center == null
        // Show a loading spinner if the center is not available
            ? Center(child: CircularProgressIndicator())
            : Stack(
          children: [
            // The main Google Map widget
            GoogleMap(
              circles: _circles,
              polylines: Set<Polyline>.of(polylines.values),
              onMapCreated: _onMapCreated,
              initialCameraPosition: CameraPosition(
                target: _center!,
                zoom: 17.0,
              ),
              myLocationEnabled: true,
              myLocationButtonEnabled: true,
            ),
            // Position the buttons at the bottom of the screen
            // position at the top
            Positioned(
              top: 10,  // Adjust as needed
              left: 10,  // Adjust as needed
              child: IconButton(
                icon: Icon(Icons.help_outline),
                color: Colors.black,
                onPressed: _showHelpDialog,
              ),
            ),
          ],
        ),
        bottomNavigationBar: BottomAppBar(
          child: Row(
              children: [
                // Use a Row to place the two buttons side by side
                const SizedBox(width: 170),
                ElevatedButton(
                  onPressed: () {
                    Navigator.push(context,
                        MaterialPageRoute(builder: (context) => StopPage()));
                  },
                  child: Text('STOP'),
                  style: ButtonStyle(
                    backgroundColor: MaterialStateProperty.all<Color>(
                        Colors.blue),
                  ),
                ),
              ]
          ),
        ),
      ),
    );
  }
  void _showHelpDialog() {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('Help'),
          content: SingleChildScrollView(
            child: ListBody(
              children: <Widget>[
                Text('Pothole Detection System'),
                SizedBox(height: 15),
                Text('This app is designed to detect & report potholes.'),
                SizedBox(height: 10),
                Text('It aims to guide you through a secure journey.'),
                SizedBox(height: 15),
                Text('Pothole sizes are represented by the following colors:'),
                SizedBox(height: 10),
                Row(children: [
                  Container(width: 20, height: 20, color: Colors.yellow),
                  SizedBox(width: 10),
                  Text('Small Potholes'),
                ]),
                SizedBox(height: 5),
                Row(children: [
                  Container(width: 20, height: 20, color: Colors.orange),
                  SizedBox(width: 10),
                  Text('Medium Potholes'),
                ]),
                SizedBox(height: 5),
                Row(children: [
                  Container(width: 20, height: 20, color: Colors.red),
                  SizedBox(width: 10),
                  Text('Large Potholes'),
                ]),
              ],
            ),
          ),
          actions: <Widget>[
            TextButton(
              child: Text('OK'),
              onPressed: () {
                Navigator.of(context).pop();
              },
            ),
          ],
        );
      },
    );
  }

  Future<void> _reportPothole(String size) async {
    potholesReportedByUser++;
    // Get current location
    Position position;
    try {
      position = await Geolocator.getCurrentPosition(desiredAccuracy: LocationAccuracy.high);
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Error fetching location. Please try again.')));
      return;
    }

    // Get size of the pothole through a dialog
    if (size == null) return;  // If user cancelled or didn't select size

    // Add data to Firestore
    await _addPotholeToDatabase(position, size);
  }

  // Adding the pothole information to the database.
  Future<void> _addPotholeToDatabase(Position position, String size) async {
    try {
      await FirebaseFirestore.instance.collection('potholes').add({
        'latitude': position.latitude,
        'longitude': position.longitude,
        'size': size,
        'date_reported': DateFormat('yyyy-MM-dd HH:mm:ss').format(DateTime.now()),
        'reported_by': 'user_${Random().nextInt(9999)}'
      });
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Pothole reported successfully!')));
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Error reporting pothole. Please try again.')));
    }
  }

  // Checks for location permission fro the user.
  Future<bool> _handleLocationPermission() async {
    bool serviceEnabled;
    LocationPermission permission;

    serviceEnabled = await Geolocator.isLocationServiceEnabled();
    // If location services is disabled.
    if (!serviceEnabled) {
      ScaffoldMessenger.of(context).showSnackBar(const SnackBar(
          content: Text('Location services are disabled. Please enable the services')));
      return false;
    }
    permission = await Geolocator.checkPermission();
    if (permission == LocationPermission.denied) {
      permission = await Geolocator.requestPermission();
      if (permission == LocationPermission.denied) {
        ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('Location permissions are denied')));
        return false;
      }
    }
    if (permission == LocationPermission.deniedForever) {
      ScaffoldMessenger.of(context).showSnackBar(const SnackBar(
          content: Text('Location permissions are permanently denied, we cannot request permissions.')));
      return false;
    }
    return true;
  }
  // Gets the position of the user.
  Future<void> _getCurrentPosition() async {
    final hasPermission = await _handleLocationPermission();
    if (!hasPermission) return;
    await Geolocator.getCurrentPosition(
        desiredAccuracy: LocationAccuracy.high)
        .then((Position position) {
      setState(() => _currentPosition = position);
    }).catchError((e) {
      debugPrint(e);
    });
  }

  // function to convert a string variable to a position variable. This way we can convert destination string to desired location
  Position stringToPosition(String input) {
    final components = input.split(',');
    if (components.length != 2) {
      throw FormatException('Input should be in format "latitude,longitude"');
    }

    final latitude = double.tryParse(components[0]);
    final longitude = double.tryParse(components[1]);

    if (latitude == null || longitude == null) {
      throw FormatException('Invalid latitude or longitude value');
    }

    return Position(latitude: latitude, longitude: longitude, timestamp: DateTime.now(), accuracy: 0, altitude: 0.0, altitudeAccuracy: 0.0, heading: 0.0, headingAccuracy: 0.0, speed: 0.0, speedAccuracy: 0.0);
  }
}